<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="statusStrip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAABAQEAAAAAAAEBAQAAAAAAAQEBAAEBAQABAQEAAQEBAAEBAQAAAAAAMC9CAB0dPQEbGj8IGxo/KSAf
        SWAkI094JyVWXygmWDYpJ1kVKihXAyYkSAAAAAAAAAAAAAEBAQABAQEAAQEBAAEBAQAAAAAAAQEBAAAA
        AAABAQEAAQEBAAAAAAAAAAAAAQEBAAEBAQAAAAAAAQEBAAEBAQAAAAAANDJkACYlUwEjIU4NJSRUVCkp
        X7MqKV/uLCtl+y4tav0vLmz7MC9r9S8uZ90uLWCGMjBeFTIvYwABAQEAAQEBAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAQEBAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQAAAAAAAQEBAB8dRQAiIU0HIiFQTSUk
        VsAtK2b4MC9s/zMxcP81M3T/NTNy/zMycf8xL23/MC5o/zMwavwzMWW8MC5cHDk2XAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAQEBAAAAAAABAQEAAQEBAAAAAAABAQEAAAAAABIOHgAaGTYBHx5IJyMj
        VKIoJ2D0Kihg/zAuaf82NHX/NzV2/zc0cv82NHH/NjNx/zUzb/82M27/ODZ0/zo3cv04NWujNjVfCDEo
        UgABAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAAAAAAAAAAAAAQEBAAAAAAANDSEAFRQwBxsa
        O1skI1bcLSts/jAucf8vLm3/Ly5o/zQxbf83NHL/ODZ0/zo3dP88OXf/Pz1+/0A9ff8+O3j/QD13/0E9
        d/Q/PHFITUl3AAAAAAAAAAAAAQEBAAEBAQABAQEAAAAAAAAAAAABAQEAAAAAAAEBAQAAAAAAKiVPABgY
        NA4eHUWIJyZc9C4tbf8wL2//NDN3/zc2fP8xL2r/MS5l/zg2cf88OXb/QT5//0VChP9EQH//R0OC/0pG
        hf9TTo7/XFaO/3RukbublqwM2tTfAAEBAQAAAAAAAQEBAAEBAQAAAAAAAQEBAAEBAQAAAAAAAQEBACEf
        SAAjI00TKCZaoy4tafsxL3D/MzJ1/zg3fv84N33/NTR1/zU0cv8xLmP/ODVu/0I/f/9EQYD/R0OB/0xI
        iP9STo//YVyR/4uFpP+spbr/t7DC97q0xVa9t8YBAAAAAAEBAQABAQEAAQEBAAEBAQAAAAAAAQEBAAAA
        AAAcHDUAIyRPDiopX6YzMXH8NDN1/zc1ev86OYL/ODd7/zc1dv83NXX/PDp7/z06e/86N3D/QD13/0hE
        gv9RTYz/XFaP/4F7nv+dlq3/rae6/7mzxP+6tMb/urTFxrq1xRC7tsQAAAAAAAEBAQAAAAAAAQEBAAEB
        AQABAQEAAAAAAB8fOgMjI0qALy5o+jc2eP86OX//OTh7/zg3ef84Nnb/Ojh5/z89gf9BP4L/Qj9//z88
        df9FQXz/U06J/3Zwl/+OiKD/bGZ4/2Zfc/9IRFL/opyv/7m0xf+6tMX6ubPEZby3xwEAAAAAAAAAAAAA
        AAABAQEAAQEBAAEBAQAeITsAISJGHiUlTuYzMnD/OTh7/zk3eP86OHr/OTh4/z07ff9BP4P/QT5//0VB
        f/9LSIn/UU2O/2ReiP+bla3/jIWa/1ZRY/+po7f/trDD/4iClf97dof/ubPF/7u1xv+5tMXSu7XGFsfC
        0AAAAAAAAAAAAAEBAQABAQEAAAAAAC0xawAoKFpTJiVR+i8uZP83NnT/OTh2/zw6ev9APoL/QkCD/0E+
        ff9GQ4L/UEyP/1lUj/+HgaD/sKq+/7mzxf+mn7P/R0NR/6agtP+4ssX/i4SY/4qDmf+zrcD/urTG/7q0
        xfy4ssR0u7XFAgEBAQABAQEAAAAAAAEBAQABAQEALCtXAjEwaooqKVz+KihX/zU0bv87OXf/Q0CC/0RC
        hP9FQoH/SkaI/1JOjv9qZJL/hn6Z/396i/+Dfo7/qKK2/7ixxP+Jg5X/Xlho/394i/9wa3z/dnCB/19a
        av+xq77/urTG/7mzxdy0r78eSkVUAAEBAQABAQEAAQEBAAAAAAAxMGIENTRxrjEwav8kIkv/MzFm/0A+
        fv9EQoH/R0SD/05KjP9WUoz/h4Gf/4uEmf9qZXT/lo+k/395iv9GQk//oJqt/7Suwf9fWWf/cWt9/7ix
        xf+0rsL/WlJn/6Gar/+5s8X/qaO3/W1ohYQ+OmQDAAAAAAAAAAABAQEAAQEBAC4sVwQ1M2yoNzVz/ysp
        Wf8sKln/PDlx/0dDgP9QS4z/Z2GR/6CasP+yrMD/VE9f/6qkuP+5s8T/uLLE/46Hmf9MSVb/sKq+/6Sd
        sP9JRFH/pqC1/5KLn/9qZXb/sKq+/5uVqv9dWIX/SUR+5Tk2Yyc7OGMAAAAAAAAAAAAAAAAAKCZEATQy
        aHc6OXf9PTt7/ygmUP80MWH/S0aA/3hylv+tp7v/ubPF/7Grvv9CP0v/rKa6/7q0xf+6tMb/ta/C/2Jd
        bP+KhZf/ubLF/4J7jv9HQlH/h4GU/6ulu/+Ffpn/U06E/01IiP8/O3b9NTJiky8sUwQ3KC4AAAAAAAAA
        AAAiIUkAMzJiKD07d+VDQH7/QD12/z05XP+Ffpj/d3GF/21nef+moLX/t7DD/2Jcbf+HgpX/uLPF/7q0
        xv+5s8X/i4aY/3VvgP+5s8X/s63A/6Kdsf+jnbP/amSH/1RQjf9PSor/QT14/zc0bf8wLV/sLShKUiwj
        LTAsJCUEUENCAAEBAQA2NGMDOjdrdEhEgflfWZD/m5Ws/7Suwf+hm67/lo+i/1tXZ/+xq77/m5So/0I9
        S/+ln7P/urTH/7m0xv+Jg5f/gHqM/7iyxf+0rsH/i4Sd/1VRgv9UUJD/TkqK/0I+e/84NGz/Mi5m/y4r
        YP8rI0f4LCIq7y0lJF43LiwBAAAAACcmQgA3NWALVlKDoqCasv25tMX/urTG/7q0xf+3scT/fniL/3l1
        hv+1rsP/h3+T/0tHVP+Lhpj/i4WY/2dgcv+sprr/pZ6z/2tlhP9LR37/TkqJ/0pFgv9CPnr/OjZv/zMw
        Z/8vLGT/KiZa/ykhO/8mHR7/LCMi2T4zMhgBAQEAAQEBAEZDZACclqscubTFybq0xv+6tMX/ubTF/7m0
        xf+wqr3/WVRj/5qVqP+2sMP/npeq/4F7jP+Lhpj/qKO3/4uEnf9WUYT/TEmI/0NAev9BPXX/Pjpz/zk1
        bv81MWn/MS5n/ywnW/8rIkD/Jx4k/yMbGv8xKCb1WExKMwEBAQABAQEABgYGALu0wwG7tcY4urTG5Lm0
        xf+5tMX/urTF/7iyxP+blaj/VVBg/7Cqvf+5s8X/t7HE/6Kcsf9qZYn/U0+N/09Mj/9GQ4T/Ojdu/zYy
        Z/80MGP/NTBo/zItZP8vKFv/LiRB/ywhJv8qIR//LSQh/kg9O7xmWVUNAAAAAAAAAAAAAAAAAQEBALmy
        wwK7tcZfubTG9bq0xv+5tMX/urTG/7eww/+EfZH/o56x/7Cqvf+DfZj/VVGG/1NPkv9NSoz/Qz9+/zw5
        eP80MWv/MCxf/zEtYf8vKl7/LSdV/y0kOv8wJSj/Mygn/zMpJv9NQT/laFxYN3VpZAAAAAAAAAAAAAAA
        AAAAAAAAvLjGALq0xAe6tMWNubTG/Lq0xf+5tMX/urTF/7OtwP+XkKf/YVyJ/1VRkf9TUJP/SkeI/z88
        ev85NnP/NDFs/zEuaf8tKWD/KyVT/yskSP8sIi7/Micn/zktK/88MC7/T0JB7HlraVOOgoACJiYmAAEB
        AQAAAAAAAAAAAAAAAAAAAAAAubHCALq1xBK8tsi3urTG/riyxP+knrH/bmiF/1FNh/9VUpT/UEyO/0dE
        hP9APXz/NzRw/zQwbf8xLWr/LChh/yokWP8rIj7/LyUq/zcrKf8+MS//QzU0/1ZIRueAcW5VlYmGA4N9
        ewAAAAAAAQEBAAEBAQABAQEAAAAAAAAAAAABAQEAu7XFALm0xSiqpLfYfniX/0ZCa/81MmD/R0N+/0dD
        gP9DQH7/Pjp3/zk2cf81MW3/MCxo/ysnXv8rJFD/LiQ0/zcrK/8/Mi//QzYz/0k7OP5eTkzXgHFvRJiL
        iAJ/eXcAAAAAAAAAAAABAQEAAAAAAAEBAQAAAAAAAAAAAAEBAQAnJycAioWXAVNPektPS4nuSEWE/y0r
        V/8yL13/OjZu/zk2bv83M23/NjFt/y8rYv8sJlf/MCZB/zktM/9FNzX/TD05/04/O/9PQDv7YFBNtnxr
        aSeRhIEBAwMCAAAAAAAAAAAAAAAAAAEBAQAAAAAAAAAAAAEBAQAAAAAAAAAAAAAAAAAAAAAAPDloBD06
        cHY8OXT5MjBm/yYjSP8uK1n/MzBn/zEtZP8vKV3/MCdL/zksN/9LOzv/WUhE/19NSv9iUEz/Xk1I7mRU
        T4BvYFsRfG9qAAAAAAAAAAAAAAAAAAAAAAABAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAAAA
        AAA/PXQAMC5cCzEvYaQxLmb+KCRR/yQgR/8pJFD/LSVL/zUqOv9FNzj/WUhF/2hVUv90X1z/dGBc+29b
        V8dsWlZDc2JcBH1uZgABAQEAAAAAAAAAAAAAAAAAAQEBAAAAAAAAAAAAAAAAAAAAAAABAQEAAAAAAAEB
        AQAAAAAAAQEBAAAAAAAtJC8BKCI4YigjTPopIk3/Jh81/zInMP9CNDb/VUVC/2dUUP92Yl7/fmll/oBq
        Z+V5Y2B3dGBdE3hoYwFwaGQAAQEBAAAAAAABAQEAAAAAAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAABAQEAAQEBAAAAAAABAQEAAQEBAC8mJQMuJCibMicw/jQpLf88MC7/Sz05/1tKRv9tWlb/fWhk/oJs
        ae1+aWaVdGBdKXhjYAN/bWoAAAAAAAAAAAABAQEAAAAAAAAAAAAAAAAAAQEBAAEBAQABAQEAAAAAAAEB
        AQABAQEAAAAAAAAAAAAAAAAAAAAAAAEBAQABAQEAOy8xAUA0MkpGODbzSTs4/0s9Of9WR0H/Z1VP/Hdi
        XuZ9aGWVdGBdM3BeWwVyZV4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAAQEBAAEB
        AQAAAAAAAQEBAAEBAQAAAAAAAAAAAAAAAAAAAAAAAQEBAAAAAAAAAAAARzs5Bk5APXxQQT7fVkZC11xL
        Rq1iUExnZ1VRIW9dWgR1ZmAAKCgoAAAAAAABAQEAAAAAAAAAAAAAAAAAAAAAAAEBAQABAQEAAQEBAAEB
        AQABAQEAAQEBAAAAAAAAAAAAAQEBAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOQkAAVEZCBFhI
        RRNbS0cOXExHBF9PSQFcTUcAAAAAAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAAQEBAAEB
        AQABAQEAAQEBAAEBAQAAAAAA/+AP//+AB///AAP//AAB//gAAf/wAAD/4AAAf8AAAH+AAAA/gAAAP4AA
        AB8AAAAfAAAADwAAAA8AAAAHgAAAAYAAAADAAAAA4AAAAOAAAADwAAAB+AAAAfwAAAP+AAAH/gAAD/8A
        AD//gAB//4AA//+AA///gA///8A////g//8=
</value>
  </data>
</root>